{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfe1 Home Page Flask-Authlib \ud83d\udd10 Welcome \ud83d\udc4b Flask-Authlib - Authentication Library For Flask Web Framework \ud83d\udd25 Installation Create virtual environment for your python project: python -m venv env Virtual Environment The venv module provides support for creating lightweight \u201cvirtual environments\u201d with their own site directories, optionally isolated from system site directories. Python docs - Creation of virtual environments Activate it: Linux Windows bash/zsh : $ ls env/ $ source env/bin/activate cmd.exe : C:\\> env\\Scripts\\activate.bat PowerShell : PS C :\\> < venv >\\ Scripts \\ Activate . ps1 Note On Microsoft Windows, it may be required to enable the Activate.ps1 script by setting the execution policy for the user. You can do this by issuing the following PowerShell command: PS C :> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser From python docs Install this library by using pip command: $ pip install -U flask_authlib Licence This project is licensed under the terms of the MIT license. $ pip show flask_authlib Name: Flask-Authlib Version: 1.4.0 Summary: Authentication library for Flask Web Framework Home-page: https://github.com/AbduazizZiyodov/flask-authlib Author: Abduaziz Ziyodov Author-email: abduaziz.ziyodov@mail.ru License: MIT Location: ... Requires: ...","title":"\ud83c\udfe1 Home Page"},{"location":"#home-page","text":"","title":"\ud83c\udfe1 Home Page"},{"location":"#installation","text":"Create virtual environment for your python project: python -m venv env Virtual Environment The venv module provides support for creating lightweight \u201cvirtual environments\u201d with their own site directories, optionally isolated from system site directories. Python docs - Creation of virtual environments Activate it: Linux Windows bash/zsh : $ ls env/ $ source env/bin/activate cmd.exe : C:\\> env\\Scripts\\activate.bat PowerShell : PS C :\\> < venv >\\ Scripts \\ Activate . ps1 Note On Microsoft Windows, it may be required to enable the Activate.ps1 script by setting the execution policy for the user. You can do this by issuing the following PowerShell command: PS C :> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser From python docs Install this library by using pip command: $ pip install -U flask_authlib Licence This project is licensed under the terms of the MIT license. $ pip show flask_authlib Name: Flask-Authlib Version: 1.4.0 Summary: Authentication library for Flask Web Framework Home-page: https://github.com/AbduazizZiyodov/flask-authlib Author: Abduaziz Ziyodov Author-email: abduaziz.ziyodov@mail.ru License: MIT Location: ... Requires: ...","title":"Installation"},{"location":"intro_to_flask/","text":"\ud83d\ude80 Flask About Flask - One Of The Best Python Web Frameworks! Install flask By using pip $ pip install -U flask Import Flask from flask framework and define your app: from flask import Flask app = Flask ( __name__ ) __name__ is import name for our flask app Create simple view function that returns simple JSON response: from flask import Flask app = Flask ( __name__ ) def home_view (): return { \"success\" : \"True\" } Next, you will have to add this view function on your app's url rules. For this, we have to use Flask 's add_url_rule method: from flask import Flask app = Flask ( __name__ ) def home_view (): return { \"success\" : \"True\" } app . add_url_rule ( rule = \"/\" , view_func = home_view ) Flask.add_url_rule( ... ) rule should be str view should be function or class For class based views, Flask has as_view method. For running this application, we can use Flask 's run method. But we should write this line of code on `if name == \" main \" statement. By why? if name == \" main \" ? Short Answer : this is the part that runs when the script is run from the CLI. freeCodeCamp StackOverflow # ... if __name__ == \"__main__\" : app . run () About run() Do not use run() in a production setting. It is not intended to meet security and performance requirements for a production server. Instead, see deployment for WSGI server recommendations ... # \ud83d\udc47 Flask . run . __doc__ $ python <file_name>.py Routes Another way of adding routes on your flask application is using from Flask 's route decorator: @app . route ( \"/\" ) def home_view (): return { \"success\" : \"True\" } \"/\" - url that our view function returns its response. We can set specefic http method on our routes. For this, we have to give list of http methods that we want to Flask 's route method: @app . route ( \"/\" , methods = [ \"GET\" , \"POST\" ]) def home_view (): pass For this route, our users are allowed to send requests with only GET or POST methods. methods should be list","title":"\ud83d\ude80 Flask"},{"location":"intro_to_flask/#flask","text":"About Flask - One Of The Best Python Web Frameworks! Install flask By using pip $ pip install -U flask Import Flask from flask framework and define your app: from flask import Flask app = Flask ( __name__ ) __name__ is import name for our flask app Create simple view function that returns simple JSON response: from flask import Flask app = Flask ( __name__ ) def home_view (): return { \"success\" : \"True\" } Next, you will have to add this view function on your app's url rules. For this, we have to use Flask 's add_url_rule method: from flask import Flask app = Flask ( __name__ ) def home_view (): return { \"success\" : \"True\" } app . add_url_rule ( rule = \"/\" , view_func = home_view ) Flask.add_url_rule( ... ) rule should be str view should be function or class For class based views, Flask has as_view method. For running this application, we can use Flask 's run method. But we should write this line of code on `if name == \" main \" statement. By why? if name == \" main \" ? Short Answer : this is the part that runs when the script is run from the CLI. freeCodeCamp StackOverflow # ... if __name__ == \"__main__\" : app . run () About run() Do not use run() in a production setting. It is not intended to meet security and performance requirements for a production server. Instead, see deployment for WSGI server recommendations ... # \ud83d\udc47 Flask . run . __doc__ $ python <file_name>.py Routes Another way of adding routes on your flask application is using from Flask 's route decorator: @app . route ( \"/\" ) def home_view (): return { \"success\" : \"True\" } \"/\" - url that our view function returns its response. We can set specefic http method on our routes. For this, we have to give list of http methods that we want to Flask 's route method: @app . route ( \"/\" , methods = [ \"GET\" , \"POST\" ]) def home_view (): pass For this route, our users are allowed to send requests with only GET or POST methods. methods should be list","title":"\ud83d\ude80 Flask"}]}